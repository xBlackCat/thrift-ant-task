<?xml version="1.0" encoding="UTF-8"?>
<project name="thrift-ant-task" default="all">


    <property file="build.properties"/>

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value="-Xlint:unchecked"/>
    <property name="compiler.max.memory" value="128m"/>
    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/vssver.scc/**"/>
        <exclude name="**/vssver2.scc/**"/>
        <exclude name="**/.sbas/**"/>
        <exclude name="**/.IJI.*/**"/>
        <exclude name="**/.pyc/**"/>
        <exclude name="**/.pyo/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/*.o/**"/>
        <exclude name="**/*.obj/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/*.iml"/>
        <exclude name="**/*.ipr"/>
        <exclude name="**/*.iws"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.zip"/>
        <include name="*.war"/>
        <include name="*.egg"/>
        <include name="*.ear"/>
        <include name="*.aar"/>
        <include name="*.swc"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.conf"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
        <include name="**/?*.ftl"/>
    </patternset>

    <!-- Modules -->

    <dirname property="basedir" file="${ant.file}"/>

    <available file="${basedir}/test/java" property="run.tests"/>

    <property name="compiler.args" value="${compiler.args}"/>

    <property name="output.dir" value="${basedir}/out"/>
    <property name="temp.dir" value="${output.dir}/tmp"/>
    <property name="mainoutput.dir"
              value="${output.dir}/production/${ant.project.name}"/>
    <property name="testoutput.dir"
              value="${output.dir}/test/${ant.project.name}"/>
    <property name="output.dist" value="${basedir}/dist"/>
    <property name="extras.dir" value="${basedir}/extras"/>

    <loadfile property="file.lib.version" srcfile="build-version.txt" failonerror="false"/>

    <path id="classpath">
        <pathelement location="${mainoutput.dir}"/>
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="testclasspath">
        <path refid="classpath"/>
        <fileset dir="${basedir}/lib/test">
            <include name="*.jar"/>
            <exclude name="${ant.project.name}*.jar"/>
        </fileset>
    </path>

    <path id="runtime.classpath">
        <pathelement location="${mainoutput.dir}"/>
        <path refid="classpath"/>
    </path>

    <patternset id="excluded.from.module">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation">
        <patternset refid="excluded.from.module"/>
    </patternset>

    <path id="sourcepath">
        <dirset dir="${basedir}">
            <include name="src/java"/>
        </dirset>
    </path>

    <path id="testsourcepath">
        <dirset dir="${basedir}">
            <include name="test/java"/>
        </dirset>
    </path>

    <target name="compile"
            depends="compile.production,compile.tests"
            description="Compile module ${ant.project.name}"/>

    <target name="compile.production"
            description="Compile module ${ant.project.name}; production classes">
        <mkdir dir="${mainoutput.dir}"/>
        <javac destdir="${mainoutput.dir}"
               includeantruntime="false"
               debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}"
               source="1.8"
               target="1.8"
               fork="true">
            <compilerarg line="${compiler.args}"/>
            <classpath refid="classpath"/>
            <src refid="sourcepath"/>
            <patternset refid="excluded.from.compilation"/>
        </javac>
    </target>

    <target name="compile.tests" depends="compile.production"
            description="compile module ${ant.project.name}; test classes" if="run.tests">
        <mkdir dir="${testoutput.dir}"/>
        <javac destdir="${testoutput.dir}"
               includeantruntime="false"
               debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}"
               source="1.8"
               target="1.8"
               fork="true">
            <compilerarg line="${compiler.args}"/>
            <classpath refid="testclasspath"/>
            <src refid="testsourcepath"/>
            <patternset refid="excluded.from.compilation"/>
        </javac>
    </target>

    <target name="init" depends="-init.version.file, -init.version.timestamp" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="-init.version.timestamp" unless="file.lib.version">
        <tstamp>
            <format property="timestamp.lib.version" pattern="yyyy-MM-dd" timezone="UTC"/>
        </tstamp>

        <property name="lib.version" value="${timestamp.lib.version}-TIMESTAMP"/>
    </target>

    <target name="-init.version.file" if="file.lib.version">
        <property name="lib.version" value="${file.lib.version}"/>
    </target>

    <target name="clean" description="cleanup all">
        <delete dir="${output.dist}"/>
        <delete dir="${output.dir}"/>
        <delete dir="${artifact.output.dist.zip}"/>

    </target>

    <target name="test" depends="compile.tests" if="run.tests">
        <mkdir dir="${output.dir}/report"/>
        <junit haltonerror="yes" haltonfailure="yes" fork="true">
            <classpath>
                <path refid="testclasspath"/>
                <pathelement location="${output.dir}"/>
                <pathelement location="${testoutput.dir}"/>
                <pathelement location="${basedir}/test/res"/>
                <!-- External resources are not included into compile output folder -->
                <pathelement location="${basedir}/src/res.ext"/>
            </classpath>

            <batchtest todir="${output.dir}/report">
                <formatter type="xml"/>
                <fileset dir="${testoutput.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/test/dynamic/**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="build"
            depends="init, clean, compile, test"
            description="build all modules"/>

    <target name="init.artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <property name="artifact.output.dist.zip" value="${basedir}/dist"/>
        <property name="artifact.output" value="${basedir}/dist"/>
        <mkdir dir="${artifacts.temp.dir}"/>
        <property name="temp.jar.path.dist.zip" value="${artifacts.temp.dir}/dist.zip"/>
        <property name="jar.name" value="${ant.project.name}-${lib.version}.jar"/>
        <property name="test.jar.name" value="${ant.project.name}-tests-${lib.version}.jar"/>
        <property name="temp.jar.path.jar" value="${artifacts.temp.dir}/${jar.name}"/>
    </target>


    <target name="build.jar" depends="init.artifacts, build"
            description="Build &apos;${ant.project.name}&apos; artifact">
        <property name="artifact.temp.output" value="${artifacts.temp.dir}/${ant.project.name}"/>
        <mkdir dir="${artifact.temp.output}"/>
        <jar destfile="${temp.jar.path.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${mainoutput.dir}"/>
            <zipfileset dir="${basedir}/src/res"/>
        </jar>
        <copy file="${temp.jar.path.jar}" tofile="${artifact.temp.output}/${jar.name}"/>
    </target>

    <target name="build.all.artifacts" description="Build all artifacts" depends="build.jar">
        <mkdir dir="${artifact.output}"/>
        <copy todir="${artifact.output}">
            <fileset dir="${artifact.temp.output}"/>
        </copy>

        <!-- Delete temporary files -->
        <delete dir="${artifacts.temp.dir}"/>
    </target>


    <target name="all" depends="build, build.all.artifacts" description="build all"/>
</project>
